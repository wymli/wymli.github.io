<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Db on UnderTheHood</title>
    <link>https://wymli.github.io/tags/db/</link>
    <description>Recent content in Db on UnderTheHood</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>CC BY 4.0 CN</copyright>
    <lastBuildDate>Wed, 14 May 2025 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://wymli.github.io/tags/db/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[protocol] OAuth2</title>
      <link>https://wymli.github.io/2021/03/protocol-oauth2/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://wymli.github.io/2021/03/protocol-oauth2/</guid>
      <description>&lt;h1 id=&#34;oauth20&#34;&gt;OAuth2.0&lt;/h1&gt;
&lt;p&gt;open authority 2.0,开放授权&lt;/p&gt;
&lt;p&gt;主要用于A网站向某个常用第三方社交网站请求用户信息,第三方社交网站需要给予A网站用户信息,这必须有用户的授权才行,但是如果直接给予A网站用户的用户名密码,又太不安全,并且我们希望只提供给A网站受限的资源访问权限,比如只能获取到用户名等.因此需要使用OAuth2.0&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[rpc] rpcx</title>
      <link>https://wymli.github.io/2021/03/rpc-rpcx/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://wymli.github.io/2021/03/rpc-rpcx/</guid>
      <description>&lt;h1 id=&#34;rpc识记-微服务概述&#34;&gt;RPC识记-微服务概述&lt;/h1&gt;
&lt;p&gt;respect： rpc框架:  &lt;a href=&#34;https://doc.rpcx.io/&#34;&gt;https://doc.rpcx.io/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;关键字&#34;&gt;关键字&lt;/h2&gt;
&lt;p&gt;服务发现，注册中心，服务治理，限流熔断隔离降级，codec等&lt;/p&gt;
&lt;h2 id=&#34;outline&#34;&gt;Outline&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一般的，一个rpc框架就是一个微服务框架&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个好的协议,request和response应该是同样的格式&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[sys] inotify</title>
      <link>https://wymli.github.io/2021/03/sys-inotify/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://wymli.github.io/2021/03/sys-inotify/</guid>
      <description>&lt;h1 id=&#34;inotify&#34;&gt;Inotify&lt;/h1&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;The inotify API provides a mechanism for monitoring filesystem
events.  Inotify can be used to monitor individual files, or to
monitor directories.  When a directory is monitored, inotify will
return events for the directory itself, and for files inside the
directory.
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;四个API&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;func InotifyInit() (fd int, err error)
&lt;ul&gt;
&lt;li&gt;func InotifyInit1(flags int) (fd int, err error) 这个可以设置flags(O_NONBLOCK,O_BLOCK),这涉及到read(fd,buffer,buff_size)时是阻塞还是非阻塞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;func InotifyAddWatch(fd int, pathname string, mask uint32) (watchdesc int, err error)
&lt;ul&gt;
&lt;li&gt;对pathname进行监听,并绑定到fd上,mask表示监听哪些事件&lt;/li&gt;
&lt;li&gt;返回watch desciptor,专用于remove取消监听&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;func InotifyRmWatch(fd int, watchdesc uint32) (success int, err error)
&lt;ul&gt;
&lt;li&gt;将监听事件从fd上取消&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他
&lt;ul&gt;
&lt;li&gt;读取事件
&lt;ul&gt;
&lt;li&gt;read(fd , buf , buf_sz)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;关闭监听
&lt;ul&gt;
&lt;li&gt;close(fd)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;buf 将需要被解释成:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[sys] tsar&amp;proc</title>
      <link>https://wymli.github.io/2021/03/sys-tsarproc/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://wymli.github.io/2021/03/sys-tsarproc/</guid>
      <description>&lt;h1 id=&#34;tsar&#34;&gt;TSAR&lt;/h1&gt;
&lt;p&gt;taobao system activity reporter&lt;/p&gt;
&lt;p&gt;该工具本质是在读取linux系统/proc目录下的一些计数器文件,本片文章来介绍这些文件,及其内部包含的信息&lt;/p&gt;
&lt;p&gt;关于此目录下的文件信息,&lt;/p&gt;
&lt;p&gt;可直接看linux官方文档:https://man7.org/linux/man-pages/man5/procfs.5.html&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[vue] everything</title>
      <link>https://wymli.github.io/2021/03/vue-everything/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://wymli.github.io/2021/03/vue-everything/</guid>
      <description>&lt;h1 id=&#34;1-vue的生命周期运行流程渲染流程初始化流程&#34;&gt;1. vue的生命周期/运行流程/渲染流程/初始化流程&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://cn.vuejs.org/v2/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA&#34;&gt;doc link&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;vue的入口文件可以有四个可能的命名:main.js,index.js,app.vue,App.vue&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[vue] import-export</title>
      <link>https://wymli.github.io/2021/03/vue-import-export/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://wymli.github.io/2021/03/vue-import-export/</guid>
      <description>&lt;h1 id=&#34;about-import-and-export&#34;&gt;About import and export&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;这是es6的语法,即js的语法&lt;/li&gt;
&lt;li&gt;export用于对外输出本模块的数据&lt;/li&gt;
&lt;li&gt;import用于引入其他模块的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;语法细则&#34;&gt;语法细则&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// 导出变量
// 法一
// js1
export var name = &amp;quot;a&amp;quot;
// js2
import {name} from &amp;quot;./js1.js&amp;quot;

// 法二
// js1
var name1 = &amp;quot;a&amp;quot;
var name2 = &amp;quot;b&amp;quot;
export {name1 , name2}
// 或者
export name1
export name2
// 或者
export var name1 = &amp;quot;a&amp;quot;
export var name2 = &amp;quot;b&amp;quot;

// js2
import {name1 , name2} from &amp;quot;./js1.js&amp;quot;
// 或者
import {name1} from &amp;quot;./js1.js&amp;quot;
import {name2} from &amp;quot;./js1.js&amp;quot;

// ===========================

// 导出函数,和变量是一致的
function add(x,y){
  return (x+y)
}
export {add}
// 或者
export function add(x,y){
  return x+y
}
// js2
import {add} from &amp;quot;./js1.js&amp;quot;

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;export-and-export-default&#34;&gt;export and export default&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;export,export default均可用于导出变量,函数,文件,模块等&lt;/li&gt;
&lt;li&gt;一个文件或模块中,export/import可以有多个,但是export default只能有一个&lt;/li&gt;
&lt;li&gt;export的导出,import时要加入{},但是export default则不需要&lt;/li&gt;
&lt;li&gt;export default相当于指定默认输出,而export时,import要完整写出对应导出的变量/函数名&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;export default {
	address：&#39;1&#39;,
}
export var title = &#39;2&#39;
export var zzz = &#39;3&#39;
// js2
import js1,{title as t , zzz} from &amp;quot;./js1.js&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;import的后缀名省略&#34;&gt;import的后缀名省略&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;直接使用&lt;code&gt;import js from &amp;quot;./js1&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;规则:
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;webpack.base.conf.js&lt;/code&gt; 中设置&lt;/li&gt;
&lt;li&gt;可以省略js,vue后缀&lt;/li&gt;
&lt;li&gt;若同时存在js,vue后缀同名文件,js&amp;gt;vue&lt;/li&gt;
&lt;li&gt;from后可以是文件夹
&lt;ul&gt;
&lt;li&gt;加载规则:
&lt;ul&gt;
&lt;li&gt;先看该文件夹有没有packag.json
&lt;ul&gt;
&lt;li&gt;若有:取package.main指定的js作为from的来源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;index.js&lt;/li&gt;
&lt;li&gt;index.vue&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注意,一般来说 package.json都只会出现项目根目录,注意不是@,是@的再外面一层,用来配置npm install这些指令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://wymli.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wymli.github.io/about/</guid>
      <description>&lt;h2 id=&#34;hi-there-&#34;&gt;Hi there 👋&lt;/h2&gt;
&lt;p&gt;&amp;#x1f3c3; 求实习&lt;/p&gt;
&lt;h4 id=&#34;about-me&#34;&gt;About me:&lt;/h4&gt;
&lt;p&gt;♂, 信息与计算科学(计算机学院) 中山大学 广州&lt;br&gt;
2018 - 2022&lt;/p&gt;
&lt;h4 id=&#34;contact-me&#34;&gt;Contact me:&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;mailto:liwm29@mail2.sysu.edu.cn&#34;&gt;liwm29@mail2.sysu.edu.cn&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://wymli.github.io/1/01/datamining-cluster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wymli.github.io/1/01/datamining-cluster/</guid>
      <description>&lt;h1 id=&#34;聚类&#34;&gt;聚类&lt;/h1&gt;
&lt;p&gt;聚类是一种无监督的方法,我们仅仅通过向量的特征即可将不同的向量按相邻的距离聚在一起&lt;/p&gt;
&lt;p&gt;对于输入的数值元组的不同的视角,我们可以定义不同的距离&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将元组视为向量
&lt;ul&gt;
&lt;li&gt;计算cos距离来求解相似度,即余弦值,可有余弦定理计算得出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;将元组视为集合
&lt;ul&gt;
&lt;li&gt;计算jaccard距离,即A∩B/A∪B&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;将元组视为欧氏空间中的坐标点
&lt;ul&gt;
&lt;li&gt;计算欧式距离&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;层次聚类&#34;&gt;层次聚类&lt;/h2&gt;
&lt;p&gt;方法是不断的将小聚类合并(合并两个最近的聚类),形成大的聚类,从单个点作为一个聚类开始&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
